3
0 >> pb
1 >> pb + sb
2 >> rrb + pb
3 >> pb + rb

5
0 >> pb
1 >> pb + sb
2 >> rb + rb + pb
3 >> rrb + rrb + pb
4 >> rrb + pb
5 >> pb + rb ?

7      5
12 - 0 <
10 - 1 <
8  - 2 <
6  - 3 <
3  - 4 >
1  - 5
-5 - 6


7      5
3  - 0 >
1  - 1 >
-5 - 2 >
12 - 3 <
10 - 4 <
8  - 5 <
6  - 6 <


7      5
8  - 0 <
6  - 1 <
3  - 2 >
1  - 3 >
-5 - 4 >
12 - 5 <
10 - 6 


7      -8
3  - 0 >
1  - 1 >
-5 - 2 >
12 - 3 <
10 - 4 
8  - 5 
6  - 6 

5       5
2  - 0 
4  - 1
6  - 2
8  - 3
30 - 4

5      5
6  - 0 <  >> pa
8  - 1 <  >> ra + pa
30 - 2 <  >> ra + ra +pa
2  - 3 >  >> rra + rra + pa
4  - 4    >> rra + pa
   - 5    >> pa + ra?

a  b
1  5
3  2
6
8



     -12
34   98
93   72
448  3
     2


static void	find_target_in_b(t_stack *a, t_stack *b, t_info *info)
{
	t_stack	*cur;

	while (a)
	{
		cur = b;
		while (cur)
		{
			if (a->nbr > info->b_max)
			{
				while (cur->nbr != info->b_max)
					cur = cur->next;
				a->target_p = cur->cur_p;
			}
			else if (a->nbr < info->b_min)
			{
				while (cur->nbr != info->b_min)
					cur = cur->next;
				a->target_p = cur->cur_p + 1;
			}
			else
			{
				while (a->nbr > cur->nbr)
					cur = cur->next;
				while (a->nbr < cur->nbr && cur->next && a->nbr < cur->next->nbr)
					cur = cur->next;
				if (!cur->next)
					a->target_p = 0;
				else
					a->target_p = cur->cur_p + 1;
			}
			if (a->target_p == info->b_n)
				a->target_p = 0;
			if (a->target_p >= 0)
				break ;
		}
		a = a->next;
	}
}

static void	find_target_in_a(t_stack *b, t_stack *a, t_info *info)
{
	t_stack	*cur;

	while (b)
	{
		cur = a;
		while (cur)
		{
			if (b->nbr > info->a_max)
			{
				while (cur->nbr != info->a_max)
					cur = cur->next;
				b->target_p = cur->cur_p + 1;
			}
			else if (b->nbr < info->a_min)
			{
				while (cur->nbr != info->a_min)
					cur = cur->next;
				b->target_p = cur->cur_p;
			}
			else
			{
				while (b->nbr < cur->nbr)
					cur = cur->next;
				while (b->nbr > cur->nbr && cur->next && b->nbr > cur->next->nbr)
					cur = cur->next;
				if (!cur->next)
					b->target_p = 0;
				else
					b->target_p = cur->cur_p + 1;
			}
			if (b->target_p == info->a_n)
				b->target_p = 0;
			if (b->target_p >= 0)
				break ;
		}
		b = b->next;
	}
}



t_stack *find_target_node(t_stack *src, t_stack *cur, t_info *info, char dst)
{
	if (dst == 'b')
	{
		if (src->nbr > info->b_max)
			while (cur->nbr != info->b_max)
				cur = cur->next;
		else if (src->nbr < info->b_min)
			while (cur->nbr != info->b_min)
				cur = cur->next;
		else
		{
			while (src->nbr > cur->nbr)
				cur = cur->next;
			while (src->nbr < cur->nbr && cur->next && src->nbr < cur->next->nbr)
				cur = cur->next;
		}
	}
	if (dst == 'a')
	{
		if (src->nbr > info->a_max)
			while (cur->nbr != info->a_max)
				cur = cur->next;
		else if (src->nbr < info->a_min)
			while (cur->nbr != info->a_min)
				cur = cur->next;
		else
		{
			while (src->nbr < cur->nbr)
				cur = cur->next;
			while (src->nbr > cur->nbr && cur->next && src->nbr > cur->next->nbr)
				cur = cur->next;
		}
	}
	return (cur);
}
